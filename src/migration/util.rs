use anyhow::Context;
use anyhow::Result;
use clap::{crate_name, crate_version};
use indoc::formatdoc;
use std::{fs::File, io::Write};
use std::{
    io::{self, Read},
    path::PathBuf,
};

use crate::migration::entry::VulnComponentBatch;

/// Write content to file.
pub fn write_file(file: &str, content: &str) -> Result<()> {
    File::create(file)?.write_all(content.as_bytes())?;
    println!("Wrote file at: {}", &file);

    Ok(())
}

/// Read and parse a YAML file containing VulnComponentBatch entries.
///
/// This function takes a `PathBuf` representing the path to a YAML file. It opens
/// the file, reads its content, and attempts to parse it into a `VulnComponentBatch`
/// struct using serde_yaml.
pub fn entries_from<T: serde::de::DeserializeOwned>(file_path: &PathBuf) -> Result<T> {
    let file =
        File::open(file_path).with_context(|| format!("open file `{}`", file_path.display()))?;

    let mut content = String::new();
    let mut reader = io::BufReader::new(file);
    reader
        .read_to_string(&mut content)
        .with_context(|| format!("read content of: `{}`", file_path.display()))?;

    serde_yaml::from_str::<T>(&content).with_context(|| format!("parse: `{}`", file_path.display()))
}

/// Generate a migration file for a given set of entries.
///
/// This function takes an `Entries` struct as an argument and creates a migration file
/// with the necessary content for inserting entries into a database table. The content
/// includes information such as the app name, version, and entries in a specific format.
pub fn mk_migration(batch: VulnComponentBatch) -> String {
    let entries = serde_json::to_string_pretty(&batch.entries).expect("to serialize entries");
    formatdoc! {"
        // Automatically generated by: {app_name} {app_version}

        /* eslint-disable quotes */
        /* eslint-disable quote-props */
        /* eslint-disable comma-dangle */
        const entries = {entries};
        
        module.exports = {{
          up: async (queryInterface, _sequelize) => {{
            queryInterface.bulkInsert('ReachabilityPrivateVulnComponents', entries, {{
              updateOnDuplicate: ['evidence_notes', 'file_path', 'line_start', 'researcher', 'updated_at'],
              upsertKeys: ['cve', 'dependency_revision_id', 'function'],
            }});
          }},
          down: async (_queryInterface, _) => {{}},
        }};
    ",
    app_name = crate_name!(),
    app_version = crate_version!(),
    entries = entries,
    }
}
